import fetch from "node-fetch";
import dotenv from "dotenv";
dotenv.config();
const { FTC_API_KEY } = process.env;
import inquirer from "inquirer";
import ora from "ora";
import colors from "colors";
import { appendFileSync, readFileSync, writeFileSync } from "fs";
import { mdToPdf } from "md-to-pdf";

const logger = (log) => {
  appendFileSync("log.txt", log + "\n");
};

const markdown = (line = "") => {
  appendFileSync("out.md", line + "\n");
};

const FIRST = {
  getEvents: async (teamNumber) => {
    const url = `https://ftc-api.firstinspires.org/v2.0/2022/events?teamNumber=${teamNumber}`;
    logger(url);
    const response = await fetch(url, {
      headers: { Authorization: `Basic ${btoa(FTC_API_KEY)}` },
    });
    if (!response.ok) return { success: false, error: response.statusText };
    const data = await response.json();
    if (data.eventCount === 0)
      return { success: false, error: "No events found" };
    return { success: true, data };
  },
  getTeam: async (teamNumber) => {
    const url = `https://ftc-api.firstinspires.org/v2.0/2022/teams?teamNumber=${teamNumber}`;
    logger(url);
    const response = await fetch(url, {
      headers: { Authorization: `Basic ${btoa(FTC_API_KEY)}` },
    });
    if (!response.ok) return { success: false, error: response.statusText };
    const data = await response.json();
    if (data.teamCountTotal === 0)
      return { success: false, error: "No team found" };
    if (data.teamCountTotal > 1)
      return {
        success: false,
        error: "Multiple teams found. Verify your team number",
      };
    return { success: true, data: data.teams[0] };
  },
  getParticipants: async (eventKey) => {
    const url = `https://ftc-api.firstinspires.org/v2.0/2022/teams?eventCode=${eventKey}`;
    logger(url);
    const response = await fetch(url, {
      headers: { Authorization: `Basic ${btoa(FTC_API_KEY)}` },
    });
    if (!response.ok) return { success: false, error: response.statusText };
    const data = await response.json();
    if (data.teamCountTotal === 0)
      return { success: false, error: "No teams found" };
    return { success: true, data };
  },
};

const truncate = (str, length) => {
  if (str.length > length) return str.substring(0, length) + "...";
  return str;
};

(async () => {
  // Verify output file will not be overwritten
  try {
    readFileSync("out.md", "");
    const overwriteResponse = await inquirer.prompt([
      {
        type: "confirm",
        name: "overwrite",
        message: "out.md already exists. Overwrite?",
      },
    ]);
    if (!overwriteResponse.overwrite) return;
    writeFileSync("out.md", "");
  } catch (error) {
    // if not, create it
    writeFileSync("out.md", "");
  }

  markdown(`---
stylesheet: https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.min.css
body_class: markdown-body
css: |-
  .page-break { page-break-after: always; }
  .markdown-body { font-size: 11px; }
  .markdown-body pre > code { white-space: pre-wrap; }
---
`);
  markdown();
  markdown(`# FTC Event Pre Scouting review

Auto-generated by Jack Crane's FTC Event Pre Scouting review app at ${new Date().toISOString()}.

---
  `);

  // Get team number
  const { teamNumber } = await inquirer.prompt([
    {
      type: "input",
      name: "teamNumber",
      message: "Enter team number",
    },
  ]);
  let spinner = ora("Loading data").start();
  const team = await FIRST.getTeam(teamNumber);
  spinner.stop();
  if (!team.success) {
    console.log(colors.red(team.error));
    return;
  }
  console.log(`Team ${colors.green(team.data.nameFull)} selected.`);

  spinner = ora("Loading events").start();
  const events = await FIRST.getEvents(teamNumber);
  spinner.stop();
  if (!events.success) {
    console.log(colors.red(events.error));
    return;
  }
  console.log(
    `Found ${colors.green(events.data.eventCount)} events for this team.`
  );
  const selectedEvent = await inquirer.prompt([
    {
      type: "list",
      name: "event",
      message: "Select an event",
      choices: events.data.events.map((event) => ({
        name: `${event.name} (${new Date(
          event.dateStart
        ).toDateString()} - ${new Date(event.dateEnd).toDateString()})`,
        value: event,
      })),
    },
  ]);
  console.log(`Event ${colors.green(selectedEvent.event.name)} selected.`);

  markdown(
    `Compiled for team **${team.data.teamNumber}** - ${team.data.nameFull} (${team.data.nameShort})'s involvement in the **${selectedEvent.event.name}** event.\n`
  );

  markdown(
    "This is intended as a preparation tool for scouting and participating in an event. This is not a replacement for scouting, as it is a display of historical data, trends, and projections."
  );

  markdown();
  markdown(`## Event Information`);
  markdown(
    `The ${selectedEvent.event.name} event is a ${
      selectedEvent.event.typeName
    } event, and is being held at \`${selectedEvent.event.address} in ${
      selectedEvent.event.city
    }, ${selectedEvent.event.stateprov}\` from \`${new Date(
      selectedEvent.event.dateStart
    ).toDateString()} to ${new Date(
      selectedEvent.event.dateEnd
    ).toDateString()}\`. It is a${
      selectedEvent.event.remote ? " remote" : "n in-person"
    } event. Expect there to be ${
      selectedEvent.event.fieldCount
    } fields. Visit the event website at [https://ftc-events.firstinspires.org/2022/${
      selectedEvent.event.code
    }](https://ftc-events.firstinspires.org/2022/${selectedEvent.event.code})`
  );

  spinner = ora("Loading participants").start();
  const participants = await FIRST.getParticipants(selectedEvent.event.code);
  spinner.stop();
  if (!participants.success) {
    console.log(colors.red(participants.error));
    return;
  }

  const filteredParticipants = participants.data.teams.map((participant) => ({
    "Team Number": participant.teamNumber,
    Name: `${participant.nameFull + " " + participant.nameShort}`,
    "Rookie Year": participant.rookieYear,
  }));

  markdown();
  markdown(`## Participants`);
  markdown(`| Team Number | Team Name | Rookie Year | Experience Years |`);
  markdown(`| --- | --- | --- | --- |`);
  filteredParticipants.forEach((participant) => {
    markdown(
      `| ${participant["Team Number"]} | ${participant.Name} | ${
        participant["Rookie Year"]
      } | ${new Date().getFullYear() - participant["Rookie Year"]} |`
    );
  });

  markdown();
  markdown(`## Team Details`);
  markdown(
    `This section is a summary of the team's performance in the past. It may include data from previous years, may include data from other events, awards won, and other information.`
  );

  for (const participant of participants.data.teams) {
    markdown();
    markdown(
      `### ${participant.teamNumber} ${participant.nameFull} (${participant.nameShort})`
    );
    markdown(`From ${participant.city}, ${participant.stateProv}`);

    markdown();
    markdown(`#### Other Events`);
    const events = await FIRST.getEvents(participant.teamNumber);
    spinner = ora(`Loading events for ${participant.teamNumber}`).start();
    markdown(
      `| Event Name | Event Type | Published | Event Start | Event Code |`
    );
    markdown(`| --- | --- | --- | --- | --- |`);
    events.data.events.forEach((event) => {
      markdown(
        `| ${event.name} | ${event.typeName} | ${
          event.published ? "Yes" : "No"
        } | ${new Date(event.dateStart).toDateString()} | \`${event.code}\` |`
      );
    });
    spinner.stop();

    markdown();
    markdown(`#### Raw Data`);
    markdown();
    markdown("```json");
    markdown(JSON.stringify(participant));
    markdown("```");

    markdown();
    markdown(`---`);
    markdown();
  }

  const pdf = await mdToPdf({
    path: "out.md",
  });
  writeFileSync("out.pdf", pdf.content);
})();
